<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmbiguousMatchMethod" xml:space="preserve">
    <value>More than one method is found with the specified name and matching the specified binding constraints.</value>
    <comment>找到多个有指定名称且与指定绑定约束匹配的方法。</comment>
  </data>
  <data name="ArgumentImplementIComparable" xml:space="preserve">
    <value>At least one object must implement IComparable.</value>
    <comment>必须至少有一个对象实现 IComparable。</comment>
  </data>
  <data name="ArgumentMustBePositive" xml:space="preserve">
    <value>The parameter {0} must be greater than zero.</value>
    <comment>参数小于等于零。</comment>
  </data>
  <data name="ArgumentNegative" xml:space="preserve">
    <value>The parameter {0} can not be negative.</value>
    <comment>参数小于零。</comment>
  </data>
  <data name="ArgumentOutOfRange" xml:space="preserve">
    <value>The parameter {0} was out of range.</value>
    <comment>参数超出范围。</comment>
  </data>
  <data name="ArgumentOutOfRangeBetween" xml:space="preserve">
    <value>The parameter {0} must be between {1} and {2}.</value>
    <comment>参数超出范围。</comment>
  </data>
  <data name="ArgumentWrongType" xml:space="preserve">
    <value>The value "{0}" is not of type "{1}".</value>
    <comment>值不是特定类型。</comment>
  </data>
  <data name="ArrayNonZeroLowerBound" xml:space="preserve">
    <value>The lower bound of target array must be zero.</value>
    <comment>数组的下限必须为 0。</comment>
  </data>
  <data name="ArrayRankMultiDimNotSupported" xml:space="preserve">
    <value>Only single-dimensional arrays are supported.</value>
    <comment>多维数组不被支持。</comment>
  </data>
  <data name="ArrayTooSmall" xml:space="preserve">
    <value>Destination array is not long enough, check array index and length.</value>
    <comment>目标数组太小。</comment>
  </data>
  <data name="ArrayTypeInvalid" xml:space="preserve">
    <value>Target array type is not compatible with the type of items in the collection.</value>
    <comment>目标数组类型与集合中项的类型不兼容。</comment>
  </data>
  <data name="BaseConvertNegativeValue" xml:space="preserve">
    <value>String cannot contain a minus sign if the base is not 10.</value>
    <comment>如果基不为 10，则此字符串不能包含减号。</comment>
  </data>
  <data name="BindTargetMethod" xml:space="preserve">
    <value>Error binding to target method.</value>
    <comment>绑定到目标方法时出错。</comment>
  </data>
  <data name="EnumFailedVersion" xml:space="preserve">
    <value>Collection was modified; enumeration operation may not execute.</value>
    <comment>无法执行枚举操作。</comment>
  </data>
  <data name="EnumTypeDoesNotMatch" xml:space="preserve">
    <value>The argument type '{0}' is not the same as the enum type '{1}'.</value>
    <comment>枚举参数类型不匹配。</comment>
  </data>
  <data name="ExtraJunkAtEnd" xml:space="preserve">
    <value>Additional non-parsable characters are at the end of the string.</value>
    <comment>字符串的末尾有其他无法分析的字符。</comment>
  </data>
  <data name="FixedSizeCollection" xml:space="preserve">
    <value>Collection was of a fixed size.</value>
    <comment>集合是固定大小的。</comment>
  </data>
  <data name="InvalidBase" xml:space="preserve">
    <value>Invalid Base.</value>
    <comment>无效的基。</comment>
  </data>
  <data name="InvalidOffsetLength" xml:space="preserve">
    <value>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</value>
    <comment>偏移量和长度超出界限。</comment>
  </data>
  <data name="KeyDuplicate" xml:space="preserve">
    <value>An item with the same key has already been added.</value>
    <comment>键重复。</comment>
  </data>
  <data name="MustBeDelegate" xml:space="preserve">
    <value>Type must derive from Delegate.</value>
    <comment>类型必须从委托派生。</comment>
  </data>
  <data name="NoParsibleDigits" xml:space="preserve">
    <value>Could not find any recognizable digits.</value>
    <comment>未能找到任何可识别的数字。</comment>
  </data>
  <data name="ObjectDisposed" xml:space="preserve">
    <value>The object has been disposed.</value>
    <comment>对象已释放资源。</comment>
  </data>
  <data name="OverflowByte" xml:space="preserve">
    <value>Value was either too large or too small for a Byte.</value>
    <comment>值对于 Byte 太大或太小。</comment>
  </data>
  <data name="OverflowInt16" xml:space="preserve">
    <value>Value was either too large or too small for an Int16.</value>
    <comment>值对于 Int16 太大或太小。</comment>
  </data>
  <data name="OverflowInt32" xml:space="preserve">
    <value>Value was either too large or too small for an Int32.</value>
    <comment>值对于 Int32 太大或太小。</comment>
  </data>
  <data name="OverflowInt64" xml:space="preserve">
    <value>Value was either too large or too small for an Int64.</value>
    <comment>值对于 Int64 太大或太小。</comment>
  </data>
  <data name="OverflowSByte" xml:space="preserve">
    <value>Value was either too large or too small for a SByte.</value>
    <comment>值对于 SByte 太大或太小。</comment>
  </data>
  <data name="OverflowUInt16" xml:space="preserve">
    <value>Value was either too large or too small for a UInt16.</value>
    <comment>值对于 UInt16 太大或太小。</comment>
  </data>
  <data name="OverflowUInt32" xml:space="preserve">
    <value>Value was either too large or too small for a UInt32.</value>
    <comment>值对于 UInt32 太大或太小。</comment>
  </data>
  <data name="OverflowUInt64" xml:space="preserve">
    <value>Value was either too large or too small for a UInt64.</value>
    <comment>值对于 UInt64 太大或太小。</comment>
  </data>
  <data name="ReadOnlyCollection" xml:space="preserve">
    <value>Collection is read-only.</value>
    <comment>集合是只读的。</comment>
  </data>
  <data name="UnboundGenParam" xml:space="preserve">
    <value>Late bound operations cannot be performed on types or methods for which ContainsGenericParameters is true.</value>
    <comment>不能是开放式泛型类型。</comment>
  </data>
  <data name="UnknownEnumType" xml:space="preserve">
    <value>Unknown enum type.</value>
    <comment>未知的枚举类型。</comment>
  </data>
</root>